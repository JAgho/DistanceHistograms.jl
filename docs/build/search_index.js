var documenterSearchIndex = {"docs":
[{"location":"#Distance-Histograms","page":"Distance Histograms","title":"Distance Histograms","text":"","category":"section"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"DistanceHistograms.jl is a lightweight package for optimised computation of pairwise and cross-correlated distance histograms. These summarise distance matrix distributions with constant memory and greater efficiency than compute-then-bin approaches. Inputs are collections of coordinates, given as Vector{SVector}; outputs are Vector{Int64}. All Distances.jl SemiMetrics are supported, with some specialised versions available. Binning is linear and 0->maximum style.  This packaged is optimised for medium scale 2-point correlation function computation, and does not employ spatial tree techniques, though the kernels are suitable for this.","category":"page"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"Compute an autocorrelation function with auto_corr, or a cross correlation function with cross_corr. Select a suitable maximal value by setting rmax, and the number of bins with nbins. metric may be set to any SemiMetric to modify the distance computation used. blocksize may be used to set the batch size for autocorrelation computation.","category":"page"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"CurrentModule = DistanceHistograms\r\nDocTestSetup = quote\r\n    using DistanceHistograms\r\nend","category":"page"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"We can compute a distance histogram over any set of points, ","category":"page"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"# generate a set of points\r\njulia> a = collect(CartesianIndices((100,100)));\r\n# convert to SVectors\r\njulia> b = reinterpret(SVector{length(axes(a)),Float64}, Float64.(vec(DistanceHistograms.as_ints(a))));\r\n#computing a correlation function with 10 bins\r\njulia> auto_corr(b,zeros(Int64, 10), 145, 10, metric=Euclidean())\r\n10-element Vector{Int64}:\r\n 2790126\r\n 6994502\r\n 9263358\r\n 9780918\r\n 8944602\r\n 6970206\r\n 3913838\r\n 1113342\r\n  212062\r\n   12046\r\n\r\njulia> cross_corr(b,b,zeros(Int64, 10), 145, 10, metric=Euclidean())\r\n10-element Vector{Int64}:\r\n  5590252\r\n 13989004\r\n 18526716\r\n 19561836\r\n 17889204\r\n 13940412\r\n  7827676\r\n  2226684\r\n   424124\r\n    24092\r\n","category":"page"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"","category":"page"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"using DistanceHistograms\r\n","category":"page"},{"location":"#Functions","page":"Distance Histograms","title":"Functions","text":"","category":"section"},{"location":"","page":"Distance Histograms","title":"Distance Histograms","text":"auto_corr\r\ncross_corr\r\nunitary_corr\r\nauto_corr!\r\ncross_corr!\r\nunitary_corr!","category":"page"},{"location":"#DistanceHistograms.auto_corr","page":"Distance Histograms","title":"DistanceHistograms.auto_corr","text":"auto_corr(points::AbstractVector{T}, histo::Array{Int64,1}, rmax::Int64, nbins::Int64; blocksize::Int=64, metric::Metric=Euclidean())) where {T<:SVector}\n\nCompute the autocorrelation distance histogram for a set of SVector points\n\nThreaded implementation for larger autocorrelations\n\n\n\n\n\n","category":"function"},{"location":"#DistanceHistograms.cross_corr","page":"Distance Histograms","title":"DistanceHistograms.cross_corr","text":"cross_corr(r1::AbstractVector{T}, r2::AbstractVector{T}, rmax::Int, nbins::Int; metric::Metric=Euclidean()) where {T<:SVector}\n\nCompute the cross correlation distance histogram between a a collection of points r1 and another collection r2\n\n\n\n\n\n","category":"function"},{"location":"#DistanceHistograms.unitary_corr","page":"Distance Histograms","title":"DistanceHistograms.unitary_corr","text":"unitary_corr(r1::AbstractVector{T}, rp, rmax::Int64, nbins::Int64, metric::Metric=Euclidean()) where {T<:SVector}\n\nCompute the cross correlation distance histogram between a single SVector rp and a collection of points r1 \n\n\n\n\n\n","category":"function"},{"location":"#DistanceHistograms.auto_corr!","page":"Distance Histograms","title":"DistanceHistograms.auto_corr!","text":"auto_corr!(points::AbstractVector{T}, histo::AbstractVector{Int}, rmax::Int, nbins::Int; blocksize::Int=64, metric::Metric=Euclidean()) where {T<:SVector}\n\nCompute the autocorrelation distance histogram for a set of SVector{T} points assigned to a preallocated array\n\n\n\n\n\n","category":"function"},{"location":"#DistanceHistograms.cross_corr!","page":"Distance Histograms","title":"DistanceHistograms.cross_corr!","text":"cross_corr(r1::AbstractVector{T}, r2::AbstractVector{T}, histo::AbstractVector{Int}, rmax::Int, nbins::Int; metric::Metric=Euclidean()) where {T<:SVector}\n\nCompute the cross correlation distance histogram between a a collection of points r1 and another collection r2 for a preallocated array\n\n\n\n\n\n","category":"function"},{"location":"#DistanceHistograms.unitary_corr!","page":"Distance Histograms","title":"DistanceHistograms.unitary_corr!","text":"unitary_corr(r1::AbstractVector{T}, rp, histo, rmax::Int64, nbins::Int64, metric::Metric=Euclidean()) where {T<:SVector}\n\nCompute the cross correlation distance histogram between a single SVector rp and a collection of points r1 and store the result to a preallocated array \n\n\n\n\n\n","category":"function"}]
}
